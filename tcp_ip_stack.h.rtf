{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14260\viewh15800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #ifndef TCP_IP_STACK_H\
#define TCP_IP_STACK_H\
\
#include <stdint.h>\
#include <stddef.h>\
#include <stdbool.h>\
\
#ifdef _WIN32\
    #include <winsock2.h>\
    #include <ws2tcpip.h>\
    #define PACKED_STRUCT __pragma(pack(push, 1)) struct __pragma(pack(pop))\
#else\
    #include <arpa/inet.h>\
    #define PACKED_STRUCT struct __attribute__((packed))\
#endif\
\
#define ETH_ALEN 6\
#define IP_ALEN 4\
#define MAX_ARP_ENTRIES 16\
#define TCP_MAX_PORTS 1024\
\
#define ETHERTYPE_IP  0x0800\
#define ETHERTYPE_ARP 0x0806\
#define ARP_OP_REQUEST 1\
#define ARP_OP_REPLY   2\
#define IP_PROTOCOL_ICMP 1\
#define IP_PROTOCOL_TCP  6\
#define ICMP_TYPE_ECHO_REPLY   0\
#define ICMP_TYPE_ECHO_REQUEST 8\
#define TCP_FIN 0x01\
#define TCP_SYN 0x02\
#define TCP_RST 0x04\
#define TCP_PSH 0x08\
#define TCP_ACK 0x10\
#define TCP_URG 0x20\
\
PACKED_STRUCT eth_header \{\
    uint8_t dst_mac[ETH_ALEN];\
    uint8_t src_mac[ETH_ALEN];\
    uint16_t ethertype;\
\};\
\
PACKED_STRUCT arp_header \{\
    uint16_t hw_type;\
    uint16_t proto_type;\
    uint8_t hw_len;\
    uint8_t proto_len;\
    uint16_t opcode;\
    uint8_t sender_mac[ETH_ALEN];\
    uint32_t sender_ip;\
    uint8_t target_mac[ETH_ALEN];\
    uint32_t target_ip;\
\};\
\
PACKED_STRUCT ip_header \{\
    uint8_t version_ihl;\
    uint8_t tos;\
    uint16_t total_len;\
    uint16_t ident;\
    uint16_t flags_frag;\
    uint8_t ttl;\
    uint8_t protocol;\
    uint16_t checksum;\
    uint32_t src_ip;\
    uint32_t dst_ip;\
\};\
\
PACKED_STRUCT icmp_header \{\
    uint8_t type;\
    uint8_t code;\
    uint16_t checksum;\
    uint16_t identifier;\
    uint16_t sequence;\
\};\
\
PACKED_STRUCT tcp_header \{\
    uint16_t src_port;\
    uint16_t dst_port;\
    uint32_t seq_num;\
    uint32_t ack_num;\
    uint8_t data_offset;\
    uint8_t flags;\
    uint16_t window;\
    uint16_t checksum;\
    uint16_t urgent;\
\};\
\
typedef struct \{\
    uint32_t ip;\
    uint8_t mac[ETH_ALEN];\
    uint32_t timestamp;\
\} arp_entry;\
\
typedef struct \{\
    uint16_t port;\
    uint32_t seq_num;\
    uint32_t ack_num;\
    uint8_t state;\
\} tcp_connection;\
\
extern uint8_t local_mac[ETH_ALEN];\
extern uint32_t local_ip;\
extern arp_entry arp_table[MAX_ARP_ENTRIES];\
extern tcp_connection tcp_connections[TCP_MAX_PORTS];\
\
void network_init(const char* ip_str);\
void process_frame(const uint8_t* frame, size_t length);\
void process_arp(const uint8_t* packet, size_t length);\
void process_ip(const uint8_t* packet, size_t length);\
void process_icmp(const uint8_t* packet, size_t length, uint32_t src_ip);\
void process_tcp(const uint8_t* packet, size_t length, uint32_t src_ip);\
\
uint16_t calculate_checksum(const void* data, size_t length);\
uint32_t parse_ipv4(const char* ip_str);\
void print_mac(const uint8_t* mac);\
void print_ip(uint32_t ip);\
bool add_arp_entry(uint32_t ip, const uint8_t* mac);\
\
#endif}